"""
A level-order traversal, also known as a breadth-first search, visits each level of a tree's nodes from 
left to right, top to bottom. You are given a pointer, root, pointing to the root of a binary search tree. 
Complete the levelOrder function provided in your editor so that it prints the level-order traversal of 
the binary search tree.

Input Format:
  The locked stub code in your editor reads the following inputs and assembles them into a BST:
  The first line contains an integer, T(the number of test cases).
  The T subsequent lines each contain an integer, data, denoting the value of an element that must be added to the BST.

Example Input:
  6
  3
  5
  4
  7
  2
  1
  
Example Output:
  3 2 5 1 4 7 
"""

import sys

class Node:
    def __init__(self,data):
        self.right=self.left=None
        self.data = data
class Solution:
    def insert(self,root,data):
        if root==None:
            return Node(data)
        else:
            if data<=root.data:
                cur=self.insert(root.left,data)
                root.left=cur
            else:
                cur=self.insert(root.right,data)
                root.right=cur
        return root

    def levelOrder(self,root):
        #make a queue to store ordered data
        node_order = [root]
        
        #add data to queue
        while len(node_order) != 0:
            current_node = node_order[0]
            node_order = node_order[1:]
            print(str(current_node.data), end=' ')
            #add left node then right node
            if current_node.left != None:
                node_order.append(current_node.left)
            if current_node.right != None:
                node_order.append(current_node.right)
        
        

T=int(input())
myTree=Solution()
root=None
for i in range(T):
    data=int(input())
    root=myTree.insert(root,data)
myTree.levelOrder(root)
