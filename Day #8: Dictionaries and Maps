/**
Given n names and phone numbers, assemble a phone book that maps friends' names to their respective 
phone numbers. You will then be given an unknown number of names to query your phone book for. 
For each name queried, print the associated entry from your phone book on a new line in the 
form name=phoneNumber; if an entry for name is not found, print Not found instead. 

Input Format:
  The first line contains an integer, n, denoting the number of entries in the phone book.
  Each of the nsubsequent lines describes an entry in the form of 2 space-separated values 
  on a single line. The first value is a friend's name, and the second value is an 8-digit phone number.
  
  After the n lines of phone book entries, there are an unknown number of lines of queries. 
  Each line (query) contains a name to look up, and you must continue reading lines until 
  there is no more input.
  
Example Input:
  3
  sam 99912222
  tom 11122222
  harry 12299933
  sam
  edward
  harry

Example Output:
  sam=99912222
  Not found
  harry=12299933
  
**/
#include <iostream>
#include <map>
#include <string>

using namespace std;


int main() {
    
    int n;
    cin >> n;
    map<string, int> phonebook;
    map<string, int>::iterator it;
    for(int i = 0; i < n; i++){
        string name;
        int number;
        cin >> name;
        cin >> number;
        //cout << name << number << endl;
        phonebook[name] = number;
    } 
    
    for(int i = 0; i < n; i++){
        string nameToFind;
        cin >> nameToFind;
        it = phonebook.find(nameToFind);
        if(it != phonebook.end()){
            cout << nameToFind << "=" << phonebook[nameToFind] << endl;
        }else{
            cout << "Not found" << endl;
        }
    }
    
    return 0;
}
